const EXAMPLES = [
    {
        "title": "Hello World",
        "code": "package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"hello world\")\n}\n"
    },
    {
        "title": "Errors",
        "code": "package main\n\nimport \"log\"\n\nfunc main() {\n    log.Fatalf(\"dead\")\n}\n"
    },
    {
        "title": "Simple Mux",
        "code": "package main\n\nimport (\n    \"bytes\"\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"net/http/httptest\"\n)\n\nfunc main() {\n    mux := http.NewServeMux()\n    mux.HandleFunc(\"GET /\", func(w http.ResponseWriter, r *http.Request) {\n        w.Write([]byte(\"Hello MUX\"))\n    })\n\n    recorder := httptest.NewRecorder()\n    request, err := http.NewRequest(\"GET\", \"/\", &bytes.Buffer{})\n    mux.ServeHTTP(recorder, request)\n\n    if err != nil {\n        log.Fatal(err)\n    }\n    fmt.Printf(\"Code: %v\\n\", recorder.Code)\n    fmt.Printf(\"Body: %v\\n\", recorder.Body)\n    fmt.Printf(\"Pattern: %v\\n\", request.Pattern)\n}\n"
    },
    {
        "title": "Mux 1.21",
        "code": "package main\n\nimport (\n    \"bytes\"\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"net/http/httptest\"\n)\n\n// GET  /\n// GET  /contact\n// GET  /api/widgets\n// POST /api/widgets\n// POST /api/widgets/:slug\n// POST /api/widgets/:slug/parts\n// POST /api/widgets/:slug/parts/:id/update\n// POST /api/widgets/:slug/parts/:id/delete\n// GET  /:slug\n// GET  /:slug/admin\n// POST /:slug/image\n\nfunc main() {\n    mux := http.NewServeMux()\n\n    mux.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\n        switch r.Method {\n        case http.MethodGet:\n            handler(w, r, \"GET /\")\n        default:\n            http.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n        }\n    })\n\n    request(mux, \"GET\", \"/\")\n    request(mux, \"GET\", \"/contact\")\n    request(mux, \"GET\", \"/hello-world\")\n    request(mux, \"GET\", \"/hello-world/admin\")\n    request(mux, \"POST\", \"/\")\n}\n\nfunc handler(w http.ResponseWriter, _ *http.Request, route string) {\n    w.WriteHeader(200)\n    w.Write([]byte(fmt.Sprintf(\"Route: %v\", route)))\n}\n\nfunc request(mux *http.ServeMux, method, url string) {\n    recorder := httptest.NewRecorder()\n    request, err := http.NewRequest(method, url, &bytes.Buffer{})\n    fmt.Printf(\"Path : %v %v\\n\", request.Method, request.URL.Path)\n\n    mux.ServeHTTP(recorder, request)\n\n    if err != nil {\n        log.Fatal(err)\n    }\n    fmt.Printf(\"%v\\n\", recorder.Body)\n    fmt.Println()\n}\n"
    },
    {
        "title": "Mux 1.21 Continued",
        "code": "package main\n\nimport (\n    \"bytes\"\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"net/http/httptest\"\n    \"strings\"\n)\n\n// GET  /\n// GET  /contact\n// GET  /api/widgets\n// POST /api/widgets\n// POST /api/widgets/:slug\n// POST /api/widgets/:slug/parts\n// POST /api/widgets/:slug/parts/:id/update\n// POST /api/widgets/:slug/parts/:id/delete\n// GET  /:slug\n// GET  /:slug/admin\n// POST /:slug/image\n\nfunc main() {\n    mux := http.NewServeMux()\n\n    mux.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n        fmt.Printf(\"Path : %v %v\\n\", r.Method, r.URL.Path)\n\n        switch r.Method {\n        case http.MethodGet:\n            segment, found := strings.CutPrefix(r.URL.Path, \"/\")\n            if !found || segment == \"\" {\n                handler(w, r, \"GET /\")\n                return\n            } else {\n                fmt.Printf(\"Segmt: %v\\n\", segment)\n            }\n\n            segments := strings.Split(segment, \"/\")\n            if len(segments) == 1 {\n                handler(w, r, \"GET /:slug\")\n                return\n            }\n\n            switch segments[1] {\n            case \"admin\":\n                handler(w, r, \"GET /:slug/admin\")\n                return\n            case \"image\":\n                handler(w, r, \"GET /:slug/image\")\n                return\n            }\n\n            http.Error(w, \"Not found\", http.StatusNotFound)\n        default:\n            http.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n        }\n    })\n\n    mux.HandleFunc(\"/contact\", func(w http.ResponseWriter, r *http.Request) {\n        fmt.Printf(\"Path : %v %v\\n\", r.Method, r.URL.Path)\n\n        switch r.Method {\n        case http.MethodGet:\n            handler(w, r, \"GET /contact\")\n        default:\n            http.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n        }\n    })\n\n    mux.HandleFunc(\"/api/widgets\", func(w http.ResponseWriter, r *http.Request) {\n        fmt.Printf(\"Path : %v %v\\n\", r.Method, r.URL.Path)\n\n        switch r.Method {\n        case http.MethodGet:\n            handler(w, r, \"GET /api/widgets\")\n        case http.MethodPost:\n            handler(w, r, \"POST /api/widgets\")\n        default:\n            http.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n        }\n    })\n\n    mux.HandleFunc(\"/api/widgets/\", func(w http.ResponseWriter, r *http.Request) {\n        fmt.Printf(\"Path : %v %v\\n\", r.Method, r.URL.Path)\n\n        switch r.Method {\n        case http.MethodPost:\n            segment, _ := strings.CutPrefix(r.URL.Path, \"/api/widgets/\")\n            fmt.Printf(\"Segmt: %v\\n\", segment)\n\n            handler(w, r, \"POST /api/widgets/\")\n        default:\n            http.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n        }\n    })\n\n    request(mux, \"GET\", \"/\")\n    request(mux, \"GET\", \"/contact\")\n    request(mux, \"GET\", \"/api/widgets\")\n    request(mux, \"POST\", \"/api/widgets\")\n    request(mux, \"POST\", \"/api/widgets/slug\")\n    request(mux, \"POST\", \"/api/widgets/slug/parts\")\n    request(mux, \"POST\", \"/api/widgets/slug/parts/1/update\")\n    request(mux, \"POST\", \"/api/widgets/slug/parts/1/delete\")\n    request(mux, \"GET\", \"/slug\")\n    request(mux, \"GET\", \"/slug/admin\")\n    request(mux, \"POST\", \"/slug/image\")\n}\n\nfunc handler(w http.ResponseWriter, _ *http.Request, route string) {\n    w.WriteHeader(200)\n    w.Write([]byte(fmt.Sprintf(\"Route: %v\", route)))\n}\n\nfunc request(mux *http.ServeMux, method, url string) {\n    recorder := httptest.NewRecorder()\n    request, err := http.NewRequest(method, url, &bytes.Buffer{})\n    mux.ServeHTTP(recorder, request)\n\n    if err != nil {\n        log.Fatal(err)\n    }\n    fmt.Printf(\"%v\\n\", recorder.Body)\n    fmt.Println()\n}\n"
    },
    {
        "title": "Mux 1.22",
        "code": "package main\n\nimport (\n    \"bytes\"\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"net/http/httptest\"\n    \"regexp\"\n)\n\n// GET  /\n// GET  /contact\n// GET  /api/widgets\n// POST /api/widgets\n// POST /api/widgets/:slug\n// POST /api/widgets/:slug/parts\n// POST /api/widgets/:slug/parts/:id/update\n// POST /api/widgets/:slug/parts/:id/delete\n// GET  /:slug\n// GET  /:slug/admin\n// POST /:slug/image\n\nfunc main() {\n    mux := http.NewServeMux()\n\n    mux.HandleFunc(\"GET /{$}\", func(w http.ResponseWriter, r *http.Request) {\n        handler(w, r, \"GET /{$}\")\n    })\n\n    mux.HandleFunc(\"GET /contact\", func(w http.ResponseWriter, r *http.Request) {\n        handler(w, r, \"GET /contact\")\n    })\n\n    mux.HandleFunc(\"GET /api/widgets\", func(w http.ResponseWriter, r *http.Request) {\n        handler(w, r, \"GET /api/widgets\")\n    })\n\n    mux.HandleFunc(\"POST /api/widgets\", func(w http.ResponseWriter, r *http.Request) {\n        handler(w, r, \"POST /api/widgets\")\n    })\n\n    mux.HandleFunc(\"POST /api/widgets/{slug}\", func(w http.ResponseWriter, r *http.Request) {\n        handler(w, r, \"POST /api/widgets/{slug}\")\n    })\n\n    mux.HandleFunc(\"POST /api/widgets/{slug}/parts\", func(w http.ResponseWriter, r *http.Request) {\n        handler(w, r, \"POST /api/widgets/{slug}/parts\")\n    })\n\n    mux.HandleFunc(\"POST /api/widgets/{slug}/parts/{id}/update\", func(w http.ResponseWriter, r *http.Request) {\n        handler(w, r, \"POST /api/widgets/{slug}/parts/{id}/update\")\n    })\n\n    mux.HandleFunc(\"POST /api/widgets/{slug}/parts/{id}/delete\", func(w http.ResponseWriter, r *http.Request) {\n        handler(w, r, \"POST /api/widgets/{slug}/parts/{id}/delete\")\n    })\n\n    mux.HandleFunc(\"GET /{slug}\", func(w http.ResponseWriter, r *http.Request) {\n        handler(w, r, \"GET /{slug}\")\n    })\n\n    mux.HandleFunc(\"GET /{slug}/admin\", func(w http.ResponseWriter, r *http.Request) {\n        handler(w, r, \"GET /{slug}/admin\")\n    })\n    mux.HandleFunc(\"POST /{slug}/image\", func(w http.ResponseWriter, r *http.Request) {\n        handler(w, r, \"POST /{slug}/image\")\n    })\n\n    request(mux, \"GET\", \"/\")\n    request(mux, \"GET\", \"/contact\")\n    request(mux, \"GET\", \"/api/widgets\")\n    request(mux, \"POST\", \"/api/widgets\")\n    request(mux, \"POST\", \"/api/widgets/slug\")\n    request(mux, \"POST\", \"/api/widgets/slug/parts\")\n    request(mux, \"POST\", \"/api/widgets/slug/parts/1/update\")\n    request(mux, \"POST\", \"/api/widgets/slug/parts/1/delete\")\n    request(mux, \"GET\", \"/slug\")\n    request(mux, \"GET\", \"/slug/admin\")\n    request(mux, \"POST\", \"/slug/image\")\n\n    request(mux, \"POST\", \"/\")\n}\n\nvar pattern regexp.Regexp = *regexp.MustCompile(`{(\\w+)}`)\n\nfunc handler(w http.ResponseWriter, r *http.Request, route string) {\n    w.WriteHeader(200)\n    fmt.Printf(\"Route: %v\\n\", route)\n\n    for _, match := range pattern.FindAllStringSubmatch(route, -1) {\n        segment := match[1]\n        // fmt.Printf(\"%v\\n\", strings.Join(match, \",\"))\n        fmt.Printf(\"%v: %v\\n\", segment, r.PathValue(segment))\n    }\n\n    fmt.Println()\n}\n\nfunc request(mux *http.ServeMux, method, url string) {\n    recorder := httptest.NewRecorder()\n    request, err := http.NewRequest(method, url, &bytes.Buffer{})\n    fmt.Printf(\"Path : %v %v\\n\", request.Method, request.URL.Path)\n    mux.ServeHTTP(recorder, request)\n\n    if err != nil {\n        log.Fatal(err)\n    }\n}\n"
    },
    {
        "title": "Challenge 1",
        "code": "package main\n\nimport (\n    \"bytes\"\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"net/http/httptest\"\n    \"regexp\"\n)\n\nfunc main() {\n    mux := http.NewServeMux()\n\n    handle(mux, \"GET /{$}\")\n    handle(mux, \"GET /{wc...}\")\n\n    request(mux, \"GET\", \"/\")\n}\n\n// Ignore everything below this...\n\n// Register the default handler at the [route].\nfunc handle(mux *http.ServeMux, route string) {\n    mux.HandleFunc(route, func(w http.ResponseWriter, r *http.Request) {\n        handler(w, r, route)\n    })\n}\n\n// Request and print metadata to stdout.\nfunc request(mux *http.ServeMux, method, url string) {\n    recorder := httptest.NewRecorder()\n    request, err := http.NewRequest(method, url, &bytes.Buffer{})\n    fmt.Printf(\"Path : %v %v\\n\", request.Method, request.URL.Path)\n    mux.ServeHTTP(recorder, request)\n\n    if err != nil {\n        log.Fatal(err)\n    }\n}\n\nvar pattern regexp.Regexp = *regexp.MustCompile(`{(\\w+)}`)\n\nfunc handler(w http.ResponseWriter, r *http.Request, route string) {\n    w.WriteHeader(200)\n    fmt.Printf(\"Route: %v\\n\", route)\n\n    for _, match := range pattern.FindAllStringSubmatch(route, -1) {\n        segment := match[1]\n        fmt.Printf(\"%v: %v\\n\", segment, r.PathValue(segment))\n    }\n\n    fmt.Println()\n}\n"
    },
    {
        "title": "Challenge 2",
        "code": "package main\n\nimport (\n    \"bytes\"\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"net/http/httptest\"\n    \"regexp\"\n)\n\nfunc main() {\n    mux := http.NewServeMux()\n\n    handle(mux, \"GET /{$}\")\n    handle(mux, \"GET /{wc...}\")\n\n    request(mux, \"GET\", \"/hello\")\n}\n\n// Ignore everything below this...\n\n// Register the default handler at the [route].\nfunc handle(mux *http.ServeMux, route string) {\n    mux.HandleFunc(route, func(w http.ResponseWriter, r *http.Request) {\n        handler(w, r, route)\n    })\n}\n\n// Request and print metadata to stdout.\nfunc request(mux *http.ServeMux, method, url string) {\n    recorder := httptest.NewRecorder()\n    request, err := http.NewRequest(method, url, &bytes.Buffer{})\n    fmt.Printf(\"Path : %v %v\\n\", request.Method, request.URL.Path)\n    mux.ServeHTTP(recorder, request)\n\n    if err != nil {\n        log.Fatal(err)\n    }\n}\n\nvar pattern regexp.Regexp = *regexp.MustCompile(`{(\\w+)}`)\n\nfunc handler(w http.ResponseWriter, r *http.Request, route string) {\n    w.WriteHeader(200)\n    fmt.Printf(\"Route: %v\\n\", route)\n\n    for _, match := range pattern.FindAllStringSubmatch(route, -1) {\n        segment := match[1]\n        fmt.Printf(\"%v: %v\\n\", segment, r.PathValue(segment))\n    }\n\n    fmt.Println()\n}\n"
    },
    {
        "title": "Challenge 3",
        "code": "package main\n\nimport (\n    \"bytes\"\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"net/http/httptest\"\n    \"regexp\"\n)\n\nfunc main() {\n    mux := http.NewServeMux()\n\n    handle(mux, \"GET /\")\n    handle(mux, \"GET /{id}\")\n    handle(mux, \"GET /{wc...}\")\n\n    request(mux, \"GET\", \"/1\")\n}\n\n// Ignore everything below this...\n\n// Register the default handler at the [route].\nfunc handle(mux *http.ServeMux, route string) {\n    mux.HandleFunc(route, func(w http.ResponseWriter, r *http.Request) {\n        handler(w, r, route)\n    })\n}\n\n// Request and print metadata to stdout.\nfunc request(mux *http.ServeMux, method, url string) {\n    recorder := httptest.NewRecorder()\n    request, err := http.NewRequest(method, url, &bytes.Buffer{})\n    fmt.Printf(\"Path : %v %v\\n\", request.Method, request.URL.Path)\n    mux.ServeHTTP(recorder, request)\n\n    if err != nil {\n        log.Fatal(err)\n    }\n}\n\nvar pattern regexp.Regexp = *regexp.MustCompile(`{(\\w+)}`)\n\nfunc handler(w http.ResponseWriter, r *http.Request, route string) {\n    w.WriteHeader(200)\n    fmt.Printf(\"Route: %v\\n\", route)\n\n    for _, match := range pattern.FindAllStringSubmatch(route, -1) {\n        segment := match[1]\n        fmt.Printf(\"%v: %v\\n\", segment, r.PathValue(segment))\n    }\n\n    fmt.Println()\n}\n"
    },
    {
        "title": "Challenge 4",
        "code": "package main\n\nimport (\n    \"bytes\"\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"net/http/httptest\"\n    \"regexp\"\n)\n\nfunc main() {\n    mux := http.NewServeMux()\n\n    handle(mux, \"GET /api/v1/{id}\")\n    handle(mux, \"GET /api/v1/$\")\n    handle(mux, \"GET /api/{wc...}\")\n\n    request(mux, \"GET\", \"/api/v1/5\")\n}\n\n// Ignore everything below this...\n\n// Register the default handler at the [route].\nfunc handle(mux *http.ServeMux, route string) {\n    mux.HandleFunc(route, func(w http.ResponseWriter, r *http.Request) {\n        handler(w, r, route)\n    })\n}\n\n// Request and print metadata to stdout.\nfunc request(mux *http.ServeMux, method, url string) {\n    recorder := httptest.NewRecorder()\n    request, err := http.NewRequest(method, url, &bytes.Buffer{})\n    fmt.Printf(\"Path : %v %v\\n\", request.Method, request.URL.Path)\n    mux.ServeHTTP(recorder, request)\n\n    if err != nil {\n        log.Fatal(err)\n    }\n}\n\nvar pattern regexp.Regexp = *regexp.MustCompile(`{(\\w+)}`)\n\nfunc handler(w http.ResponseWriter, r *http.Request, route string) {\n    w.WriteHeader(200)\n    fmt.Printf(\"Route: %v\\n\", route)\n\n    for _, match := range pattern.FindAllStringSubmatch(route, -1) {\n        segment := match[1]\n        fmt.Printf(\"%v: %v\\n\", segment, r.PathValue(segment))\n    }\n\n    fmt.Println()\n}\n"
    },
    {
        "title": "Challenge 5",
        "code": "package main\n\nimport (\n    \"bytes\"\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"net/http/httptest\"\n    \"regexp\"\n)\n\nfunc main() {\n    mux := http.NewServeMux()\n\n    handle(mux, \"GET /products\")\n    handle(mux, \"GET /products/{id}\")\n    handle(mux, \"GET /products/{id}/details\")\n    handle(mux, \"GET /products/{id}/reviews\")\n    handle(mux, \"GET /products/{id}/reviews/{review_id}\")\n    handle(mux, \"GET /products/{category}/{id}\")\n    handle(mux, \"GET /products/{category}/{id}/details\")\n    handle(mux, \"GET /products/{category}/{id}/reviews\")\n    handle(mux, \"GET /products/{category}/{id}/reviews/{review_id}\")\n    handle(mux, \"GET /search\")\n    handle(mux, \"GET /search/{query}\")\n    handle(mux, \"GET /search/{query}/filter\")\n    handle(mux, \"GET /search/{query}/filter/{filter_id}\")\n    handle(mux, \"GET /search/{query}/filter/{filter_id}/sort\")\n    handle(mux, \"GET /user/{username}\")\n    handle(mux, \"GET /user/{username}/settings\")\n    handle(mux, \"GET /user/{username}/settings/{section}\")\n    handle(mux, \"GET /user/{username}/settings/{section}/edit\")\n    handle(mux, \"GET /user/{username}/posts\")\n    handle(mux, \"GET /user/{username}/posts/{post_id}\")\n    handle(mux, \"GET /user/{username}/posts/{post_id}/comments\")\n    handle(mux, \"GET /user/{username}/posts/{post_id}/comments/{comment_id}\")\n    handle(mux, \"GET /admin\")\n    handle(mux, \"GET /admin/{section}\")\n    handle(mux, \"GET /admin/{section}/{id}\")\n    handle(mux, \"GET /admin/{section}/{id}/edit\")\n    handle(mux, \"GET /admin/{section}/{id}/delete\")\n    handle(mux, \"GET /admin/{section}/{id}/view\")\n    handle(mux, \"GET /admin/{section}/create\")\n    handle(mux, \"GET /admin/{section}/list\")\n\n    request(mux, \"GET\", \"/user/johndoe/posts/987/comments/654\")\n}\n\n// Ignore everything below this...\n\n// Register the default handler at the [route].\nfunc handle(mux *http.ServeMux, route string) {\n    mux.HandleFunc(route, func(w http.ResponseWriter, r *http.Request) {\n        handler(w, r, route)\n    })\n}\n\n// Request and print metadata to stdout.\nfunc request(mux *http.ServeMux, method, url string) {\n    recorder := httptest.NewRecorder()\n    request, err := http.NewRequest(method, url, &bytes.Buffer{})\n    fmt.Printf(\"Path : %v %v\\n\", request.Method, request.URL.Path)\n    mux.ServeHTTP(recorder, request)\n\n    if err != nil {\n        log.Fatal(err)\n    }\n}\n\nvar pattern regexp.Regexp = *regexp.MustCompile(`{(\\w+)}`)\n\nfunc handler(w http.ResponseWriter, r *http.Request, route string) {\n    w.WriteHeader(200)\n    fmt.Printf(\"Route: %v\\n\", route)\n\n    for _, match := range pattern.FindAllStringSubmatch(route, -1) {\n        segment := match[1]\n        fmt.Printf(\"%v: %v\\n\", segment, r.PathValue(segment))\n    }\n\n    fmt.Println()\n}\n"
    },
    {
        "title": "Challenge 6",
        "code": "package main\n\nimport (\n    \"bytes\"\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"net/http/httptest\"\n    \"regexp\"\n)\n\nfunc main() {\n    mux := http.NewServeMux()\n\n    handle(mux, \"GET /products\")\n    handle(mux, \"POST /products\")\n    handle(mux, \"GET /products/{id}\")\n    handle(mux, \"PUT /products/{id}\")\n    handle(mux, \"DELETE /products/{id}\")\n    handle(mux, \"GET /products/{id}/details\")\n    handle(mux, \"POST /products/{id}/details\")\n    handle(mux, \"GET /products/{id}/reviews\")\n    handle(mux, \"POST /products/{id}/reviews\")\n    handle(mux, \"GET /products/{id}/reviews/{review_id}\")\n    handle(mux, \"PUT /products/{id}/reviews/{review_id}\")\n    handle(mux, \"DELETE /products/{id}/reviews/{review_id}\")\n    handle(mux, \"GET /search\")\n    handle(mux, \"POST /search\")\n    handle(mux, \"GET /search/{query}\")\n    handle(mux, \"POST /search/{query}\")\n    handle(mux, \"GET /search/{query}/filter\")\n    handle(mux, \"POST /search/{query}/filter\")\n    handle(mux, \"GET /search/{query}/filter/{filter_id}\")\n    handle(mux, \"POST /search/{query}/filter/{filter_id}\")\n    handle(mux, \"GET /search/{query}/filter/{filter_id}/sort\")\n    handle(mux, \"POST /search/{query}/filter/{filter_id}/sort\")\n    handle(mux, \"GET /user/{username}\")\n    handle(mux, \"PUT /user/{username}\")\n    handle(mux, \"GET /user/{username}/settings\")\n    handle(mux, \"POST /user/{username}/settings\")\n    handle(mux, \"GET /user/{username}/settings/{section}\")\n    handle(mux, \"PUT /user/{username}/settings/{section}\")\n    handle(mux, \"GET /user/{username}/settings/{section}/edit\")\n    handle(mux, \"POST /user/{username}/settings/{section}/edit\")\n    handle(mux, \"GET /user/{username}/posts\")\n    handle(mux, \"POST /user/{username}/posts\")\n    handle(mux, \"GET /user/{username}/posts/{post_id}\")\n    handle(mux, \"PUT /user/{username}/posts/{post_id}\")\n    handle(mux, \"DELETE /user/{username}/posts/{post_id}\")\n    handle(mux, \"GET /user/{username}/posts/{post_id}/comments\")\n    handle(mux, \"POST /user/{username}/posts/{post_id}/comments\")\n    handle(mux, \"GET /user/{username}/posts/{post_id}/comments/{comment_id}\")\n    handle(mux, \"PUT /user/{username}/posts/{post_id}/comments/{comment_id}\")\n    handle(mux, \"DELETE /user/{username}/posts/{post_id}/comments/{comment_id}\")\n    handle(mux, \"GET /admin\")\n    handle(mux, \"POST /admin\")\n    handle(mux, \"GET /admin/{section}\")\n    handle(mux, \"POST /admin/{section}\")\n    handle(mux, \"GET /admin/{section}/{id}\")\n    handle(mux, \"PUT /admin/{section}/{id}\")\n    handle(mux, \"DELETE /admin/{section}/{id}\")\n    handle(mux, \"GET /admin/{section}/{id}/edit\")\n    handle(mux, \"POST /admin/{section}/{id}/edit\")\n    handle(mux, \"GET /admin/{section}/{id}/delete\")\n    handle(mux, \"DELETE /admin/{section}/{id}/delete\")\n    handle(mux, \"GET /admin/{section}/{id}/view\")\n    handle(mux, \"POST /admin/{section}/{id}/view\")\n    handle(mux, \"GET /admin/{section}/create\")\n    handle(mux, \"POST /admin/{section}/create\")\n    handle(mux, \"GET /admin/{section}/list\")\n    handle(mux, \"POST /admin/{section}/list\")\n\n    request(mux, \"DELETE\", \"/admin/settings/42/delete\")\n}\n\n// Ignore everything below this...\n\n// Register the default handler at the [route].\nfunc handle(mux *http.ServeMux, route string) {\n    mux.HandleFunc(route, func(w http.ResponseWriter, r *http.Request) {\n        handler(w, r, route)\n    })\n}\n\n// Request and print metadata to stdout.\nfunc request(mux *http.ServeMux, method, url string) {\n    recorder := httptest.NewRecorder()\n    request, err := http.NewRequest(method, url, &bytes.Buffer{})\n    fmt.Printf(\"Path : %v %v\\n\", request.Method, request.URL.Path)\n    mux.ServeHTTP(recorder, request)\n\n    if err != nil {\n        log.Fatal(err)\n    }\n}\n\nvar pattern regexp.Regexp = *regexp.MustCompile(`{(\\w+)}`)\n\nfunc handler(w http.ResponseWriter, r *http.Request, route string) {\n    w.WriteHeader(200)\n    fmt.Printf(\"Route: %v\\n\", route)\n\n    for _, match := range pattern.FindAllStringSubmatch(route, -1) {\n        segment := match[1]\n        fmt.Printf(\"%v: %v\\n\", segment, r.PathValue(segment))\n    }\n\n    fmt.Println()\n}\n"
    },
    {
        "title": "Challenge 7",
        "code": "package main\n\nimport (\n    \"bytes\"\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"net/http/httptest\"\n    \"regexp\"\n)\n\nfunc main() {\n    mux := http.NewServeMux()\n\n    handle(mux, \"GET /a/b/c/d\")\n    handle(mux, \"POST /x/y/z\")\n    handle(mux, \"GET /abc/{id}\")\n    handle(mux, \"PUT /abc/{id}/edit\")\n    handle(mux, \"GET /a/{b}/{c}/d/{e}\")\n    handle(mux, \"DELETE /alpha/{beta}/gamma\")\n    handle(mux, \"GET /a/{b}/c/{d}/e/{f}\")\n    handle(mux, \"POST /123/{xyz}/456\")\n    handle(mux, \"GET /a/{foo}/{bar}/{baz}\")\n    handle(mux, \"PUT /\u03b1/{\u03b2}/\u03b3\")\n    handle(mux, \"GET /foo/bar/{id}/baz\")\n    handle(mux, \"DELETE /a/{b}/c/d/{e}\")\n    handle(mux, \"GET /x/y/{z}/w\")\n    handle(mux, \"POST /m/n/o/p\")\n    handle(mux, \"GET /hello/{world}\")\n    handle(mux, \"PATCH /a/{b}/c/{d}/e/{f}/g/{h}\")\n    handle(mux, \"GET /data/{key}/value\")\n    handle(mux, \"POST /test/{param1}/sub/{param2}\")\n    handle(mux, \"GET /q/r/s/{t}/u\")\n    handle(mux, \"PUT /item/{id}/update\")\n    handle(mux, \"GET /\u65e5\u672c/{\u56fd\u5bb6}/\u90fd\u5e02\")\n    handle(mux, \"POST /nueva/{ruta}/prueba\")\n    handle(mux, \"GET /api/{v}/data\")\n    handle(mux, \"DELETE /path/{one}/here/{two}\")\n    handle(mux, \"GET /file/{type}/{name}\")\n    handle(mux, \"PUT /root/{dir}/file/{name}\")\n    handle(mux, \"GET /lorem/{ipsum}/dolor\")\n    handle(mux, \"POST /short/{a}/long/{b}/path\")\n    handle(mux, \"GET /region/{a}/{b}/{c}\")\n    handle(mux, \"PATCH /edit/{section}/{item}\")\n    handle(mux, \"GET /some/{path}/example\")\n    handle(mux, \"POST /abc/{x}/{y}/def\")\n    handle(mux, \"DELETE /delete/{item}/{info}\")\n    handle(mux, \"GET /contact/{person}/details\")\n    handle(mux, \"PUT /update/{entry}/value\")\n    handle(mux, \"GET /upload/{file}/status\")\n    handle(mux, \"POST /foo/bar/{id}/baz\")\n    handle(mux, \"GET /level/{one}/{two}/{three}\")\n    handle(mux, \"PATCH /settings/{module}/update\")\n    handle(mux, \"DELETE /remove/{entry}/from/{list}\")\n\n    // TODO\n    // request(mux, \"GET\", \"...\")\n}\n\n// Ignore everything below this...\n\n// Register the default handler at the [route].\nfunc handle(mux *http.ServeMux, route string) {\n    mux.HandleFunc(route, func(w http.ResponseWriter, r *http.Request) {\n        handler(w, r, route)\n    })\n}\n\n// Request and print metadata to stdout.\nfunc request(mux *http.ServeMux, method, url string) {\n    recorder := httptest.NewRecorder()\n    request, err := http.NewRequest(method, url, &bytes.Buffer{})\n    fmt.Printf(\"Path : %v %v\\n\", request.Method, request.URL.Path)\n    mux.ServeHTTP(recorder, request)\n\n    if err != nil {\n        log.Fatal(err)\n    }\n    fmt.Printf(\"Status: %v\", recorder.Code)\n}\n\nvar pattern regexp.Regexp = *regexp.MustCompile(`{(\\w+)}`)\n\nfunc handler(w http.ResponseWriter, r *http.Request, route string) {\n    w.WriteHeader(200)\n    fmt.Printf(\"Route: %v\\n\", route)\n\n    for _, match := range pattern.FindAllStringSubmatch(route, -1) {\n        segment := match[1]\n        fmt.Printf(\"%v: %v\\n\", segment, r.PathValue(segment))\n    }\n\n    fmt.Println()\n}\n"
    }
]